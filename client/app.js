// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require([], function() {
    var OSCRoute, blinkRoutines, hide_elem, socket;
    OSCRoute = (function(_super) {

      __extends(OSCRoute, _super);

      function OSCRoute() {
        return OSCRoute.__super__.constructor.apply(this, arguments);
      }

      OSCRoute.global(true);

      return OSCRoute;

    })(Batman.App);
    OSCRoute.Input = (function(_super) {

      __extends(Input, _super);

      function Input() {
        return Input.__super__.constructor.apply(this, arguments);
      }

      Input.global(true);

      Input.persist(Batman.RestStorage);

      Input.encode('name', 'port');

      Input.hasMany('route');

      Input.accessor('showInList', {
        get: function() {
          return (this.get('id')) > 1;
        }
      });

      Input.prototype.port = 0;

      Input.prototype.name = '';

      return Input;

    })(Batman.Model);
    OSCRoute.Output = (function(_super) {

      __extends(Output, _super);

      function Output() {
        return Output.__super__.constructor.apply(this, arguments);
      }

      Output.global(true);

      Output.persist(Batman.RestStorage);

      Output.encode('name', 'port', 'address', 'active', 'user');

      Output.accessor('showInList', {
        get: function() {
          return ((this.get('active')) || (this.get('user'))) && ((this.get('id')) !== 0);
        }
      });

      Output.accessor('activeName', {
        get: function() {
          return "" + (this.get('name')) + (this.get('active') ? '' : ' [Inactive]');
        }
      });

      Output.hasMany('route');

      Output.prototype.user = true;

      return Output;

    })(Batman.Model);
    if (Batman.BelongsToAssociation.prototype.url != null) {
      delete Batman.BelongsToAssociation.prototype.url;
    }
    hide_elem = function(e) {
      return function() {
        return $("#" + e).toggleClass('deadToMe');
      };
    };
    OSCRoute.Route = (function(_super) {

      __extends(Route, _super);

      function Route() {
        return Route.__super__.constructor.apply(this, arguments);
      }

      Route.global(true);

      Route.persist(Batman.RestStorage);

      Route.encode('match', 'reroute');

      Route.belongsTo('input', {
        autoload: false
      });

      Route.belongsTo('output', {
        autoload: false
      });

      Route.accessor('blinkID', {
        get: function() {
          return "blink" + (this.get('id'));
        }
      });

      return Route;

    })(Batman.Model);
    OSCRoute.RoutesController = (function(_super) {

      __extends(RoutesController, _super);

      function RoutesController() {
        this.create = __bind(this.create, this);
        this.set('editRoute', new Route);
      }

      RoutesController.prototype.create = function() {
        var _this = this;
        return this.editRoute.save(function() {
          return _this.set('editRoute', new Route);
        });
      };

      RoutesController.prototype.hide = hide_elem('routes');

      return RoutesController;

    })(Batman.Controller);
    OSCRoute.InputsController = (function(_super) {

      __extends(InputsController, _super);

      function InputsController() {
        this.create = __bind(this.create, this);
        this.set('editInput', new Input);
      }

      InputsController.prototype.hide = hide_elem('inputs');

      InputsController.prototype.create = function() {
        var _this = this;
        return this.editInput.save(function() {
          return _this.set('editInput', new Input);
        });
      };

      return InputsController;

    })(Batman.Controller);
    OSCRoute.OutputsController = (function(_super) {

      __extends(OutputsController, _super);

      function OutputsController() {
        this.create = __bind(this.create, this);
        this.set('editOutput', new Output);
      }

      OutputsController.prototype.hide = hide_elem('outputs');

      OutputsController.prototype.create = function() {
        var _this = this;
        return this.editOutput.save(function() {
          return _this.set('editOutput', new Output);
        });
      };

      return OutputsController;

    })(Batman.Controller);
    socket = io.connect();
    socket.on('route change', function() {
      return OSCRoute.Route.load(function() {});
    });
    socket.on('output change', function() {
      return OSCRoute.Output.load(function() {});
    });
    blinkRoutines = {};
    socket.on('blink route', function(id) {
      var unblink;
      $("\#blink" + id).addClass('blink');
      $("\#blink" + id).removeClass('unblink');
      unblink = function() {
        $("\#blink" + id).removeClass('blink');
        return $("\#blink" + id).addClass('unblink');
      };
      if (blinkRoutines[id] != null) {
        clearTimeout(blinkRoutines[id]);
      }
      return blinkRoutines[id] = setTimeout(unblink, 400);
    });
    OSCRoute.on('ready', function() {
      return $('.loading').removeClass('loading');
    });
    return OSCRoute.run();
  });

}).call(this);
